<?php
namespace Doctrine\Tests\Search;

use Doctrine\Search\SearchManager;
use Doctrine\Search\Http\Client\BuzzClient;
use Doctrine\Search\Configuration;
use Buzz\Browser;
/**
 * Test class for SearchManager.
 * Generated by PHPUnit on 2011-12-11 at 15:43:17.
 */
class SearchManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Doctrine\Search\Mapping\ClassMetadataFactory
     */
    private $metadataFactory;

    /**
     * @var Doctrine\Search\ElasticSearch\Client
     */
    private $searchClient;

    /**
     * @var Doctrine\Search\Configuration
     */
    private $configuration;

    /**
     * @var SearchManager
     */
    protected $sm;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->metadataFactory = $this->getMock('Doctrine\\Search\\Mapping\\ClassMetadataFactory');

        $this->searchClient = $this->getMock('Doctrine\\Search\\ElasticSearch\\Client', array(), array(), '', false);

        $this->configuration = $this->getMock('Doctrine\\Search\\Configuration');
        $this->configuration->expects($this->once())
              ->method('getClassMetadataFactory')
              ->will($this->returnValue($this->metadataFactory));

        $this->configuration->expects($this->once())
              ->method('getMetadataCacheImpl')
              ->will($this->returnValue($this->getMock('Doctrine\\Common\\Cache\\ArrayCache')));

        $this->sm = new SearchManager($this->configuration, $this->searchClient);
    }

    /**
     * Tests if the returned configuration is a Doctrine\\Search\\Configuration
     */
    public function testGetConfiguration()
    {
        $this->assertInstanceOf('Doctrine\\Search\\Configuration', $this->sm->getConfiguration());
    }

    /**
     *
     * @expectedException PHPUnit_Framework_Error
     */
    public function testSetObjectManagerWrongParameter()
    {
        $this->sm->setObjectManager(array());
    }


    public function testSetObjectManager()
    {
        $om = $this->getMock('Doctrine\\Common\\Persistence\\ObjectManager');
        $this->sm->setObjectManager($om);

        $omGet = $this->sm->getObjectManager();

        $this->assertEquals($om, $omGet);
    }

    public function testLoadClassMetadata()
    {
        $this->metadataFactory->expects($this->once())
            ->method('getMetadataFor')
            ->will($this->returnValue(new \Doctrine\Search\Mapping\ClassMetadata('Doctrine\Tests\Search\Documents\BlogPost')));

        $metaData = $this->sm->loadClassMetadata('Doctrine\Tests\Search\Documents\BlogPost');
        $this->assertInstanceOf('Doctrine\Common\Persistence\Mapping\ClassMetadata', $metaData);
    }

    /**
     *
     * @expectedException PHPUnit_Framework_Error
     */
    public function testLoadClassMetadataWrongParameter()
    {
        $this->sm->loadClassMetadata(new \stdClass());
    }

    public function testGetClassMetadataFactory()
    {
        $mdf = $this->sm->getClassMetadataFactory();
        $this->assertInstanceOf('Doctrine\\Search\\Mapping\\ClassMetadataFactory', $mdf);
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPersist().
     */
    public function testPersist()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBulk().
     */
    public function testBulk()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCommit().
     */
    public function testCommit()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}